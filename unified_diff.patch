--- /usr/share/voicecall-ui-jolla/pages/calling/CallingView.qml
+++ /usr/share/voicecall-ui-jolla/pages/calling/CallingView.qml
@@ -32,6 +32,12 @@
             endedCallAnimation.start()
             newCallAnimation.start()
         }
+        // patch automatic-call-recording ===>
+        if (endingCall && telephony.effectiveCallCount < 2) {
+            if (_inCallView.isRecording)
+                setAudioRecording(false)
+        }
+        // patch automatic-call-recording <===
     }
 
     Component.onCompleted: updateCallingView()
--- /usr/share/voicecall-ui-jolla/pages/calling/InCallView.qml
+++ /usr/share/voicecall-ui-jolla/pages/calling/InCallView.qml
@@ -629,12 +629,22 @@
             preferredWidth: Theme.buttonWidthMedium
             height: Theme.itemSizeLarge
             onClicked: {
+                // patch auto call recording ===>
+                if (false) {
+                // patch auto call recording <===
                 if (main.state === "silenced") {
                     telephony.hangupCall(telephony.silencedCall)
                     main.hangupAnimation.complete()
                 } else if (main.state !== 'null' && main.state !== 'disconnected') {
                     telephony.hangupCall(telephony.primaryCall)
                 }
+                // patch auto call recording ===>
+                }
+                stopRecAndHangUp()
+                // Bad record quality in the following recordings if the time between
+                // setAudioRecording(false) and telephony.hangupCall() is too short.
+                // Should probably wait for some signal before making hangupCall().
+                // patch auto call recording <===
             }
             enabled: showEndCallButton
             opacity: showEndCallButton ? 1.0 : 0.0
@@ -811,5 +821,147 @@
 
     AboutSettings {
         id: aboutSettings
-    }
+    }
+
+    // patch auto call recording ===>
+    property bool recPermit: callRecordingConfig.value && VoiceCall.VoiceCallAudioRecorder.available
+    property bool readyToRecord: callState === "active" && telephony.active
+    property bool isRecording: VoiceCall.VoiceCallAudioRecorder.recording // CallingView
+
+    Label {
+        id: patchLabel
+        y: buttonRow.y + buttonRow.height + Theme.paddingLarge
+        x: 0.5*(root.width - width)
+        text: qsTr("automatic call recording")
+        font.pixelSize: Theme.fontSizeMedium
+        color: Theme.highlightDimmerColor
+        wrapMode: Text.Wrap
+    }
+
+    Image {
+        id: phoneIcon
+        source: "image://theme/icon-l-answer?" +
+                (rotation < 90 ? Theme.highlightColor : Theme.secondaryColor)
+        anchors.top: patchLabel.bottom
+        anchors.topMargin: Theme.paddingLarge
+        x: 0.5*(parent.width - width)
+        visible: isRecording || hangUpSoon.running
+        states: [
+            State {
+                name: "ended"
+                PropertyChanges {
+                    target: phoneIcon
+                    rotation: 135
+                }
+            }
+        ]
+
+        transitions: [
+            Transition {
+                from: ""; to: "ended"
+                PropertyAnimation {
+                    target: phoneIcon
+                    properties: "rotation"
+                    duration: hangUpSoon.interval
+                }
+            },
+            Transition {
+                from: "ended"; to: ""
+                PropertyAnimation {
+                    target: phoneIcon
+                    properties: "rotation"
+                    duration: 0
+                }
+            }
+        ]
+    }
+
+    Timer {
+        id: hangUpSoon
+        interval: 1000
+        running: false
+        repeat: false
+        onTriggered: {
+            if (main.state === "silenced") {
+                telephony.hangupCall(telephony.silencedCall)
+                main.hangupAnimation.complete()
+            } else if (main.state !== 'null' && main.state !== 'disconnected') {
+                telephony.hangupCall(telephony.primaryCall)
+            }
+            phoneIcon.state = ""
+        }
+    }
+
+    function stopRecAndHangUp() {
+        var dtmin = 0, dum
+        if (VoiceCall.VoiceCallAudioRecorder.recording) { // is callState check required? conference calls?
+            dum = switchRecording()
+            dtmin = 1000 // 500 ms was too short, caused bad quality in the following recordings
+            phoneIcon.state = "ended"
+        }
+        hangUpSoon.interval = dtmin
+        hangUpSoon.start()
+        return
+    }
+
+    function switchRecording() {
+        var rec = !VoiceCall.VoiceCallAudioRecorder.recording
+
+        if (rec && recPermit && !AccessPolicy.microphoneEnabled) {
+            microphoneWarningNotification.publish()
+        }
+
+        if (!recPermit) {
+            rec = false
+        }
+
+        root.setAudioRecording(rec)
+
+        return VoiceCall.VoiceCallAudioRecorder.recording
+    }
+
+    Timer {
+        id: starter
+        interval: 500 // 200 ms too short for incoming calls, 500 ms enough
+        running: false
+        repeat: false
+        onTriggered: {
+            if (recPermit && !VoiceCall.VoiceCallAudioRecorder.recording) {
+                switchRecording()
+            }
+            patchStarting.state = ""
+        }
+    }
+
+    Timer {
+        id: startTimer
+        interval: 50
+        running: recPermit
+        repeat: true
+        property int nrIntervals: 0
+        onTriggered: {
+            if (root.visible && readyToRecord ) { // is main.state=='active' enough?
+                var date = new Date()
+                running = false
+                nrIntervals = 0
+
+                starter.start()
+                patchStarting.state = "started"
+            } else {
+                nrIntervals += 1
+            }
+        }
+    }
+
+    onVisibleChanged: {
+        if (visible && recPermit) {
+            if (!startTimer.running)
+                startTimer.start()
+        } else {
+            startTimer.stop()
+            starter.stop()
+        }
+    }
+
+    // patch auto call recording ===> v 1.0 (Nuuksio 3.2.1.20)
 }
